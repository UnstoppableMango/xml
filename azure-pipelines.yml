trigger:
  batch: true
  branches:
    include:
    - master
    - release/*
  paths:
    include:
    - src/*
    - test/*
    - tool/*

pr:
- master
- release/*

pool: Linux

variables:
  BuildConfiguration: Release
  UnMangoFeed: 'UnMango NuGet'
  CI: true

jobs:
- job: build_test
  displayName: Build and Test
  workspace:
    clean: outputs
  steps:
  - checkout: self
  
  - task: UseDotNet@2
    displayName: Install .NET Core
    inputs:
      packageType: sdk
      useGlobalJson: true

  - bash: dotnet tool restore
    displayName: Restore .NET Tools
  
  - task: DotNetCoreCLI@2
    displayName: .NET Restore
    inputs:
      command: restore
      projects: '**/*.csproj'
      nugetConfigPath: NuGet.Config
      externalFeedCredentials: $(UnMangoFeed)   # Service Connection Name
      arguments: '-c $(BuildConfiguration)'
      verbosityRestore: Normal
  
  - task: DotNetCoreCLI@2
    displayName: .NET Build
    inputs:
      command: build
      projects: '**/*.csproj'
      arguments: '--no-restore -c $(BuildConfiguration)'
  
  - task: DotNetCoreCLI@2
    displayName: .NET Test
    inputs:
      command: test
      projects: '**/*[Tt]est*.csproj'
      arguments: >
        --no-build
        --no-restore
        --configuration $(BuildConfiguration)
        --filter:"Category=Unit"
        --collect:"XPlat Code Coverage"
      publishTestResults: true

  - bash: |
      dotnet tool run reportgenerator \
        -reports:$(Agent.TempDirectory)/**/coverage.cobertura.xml \
        -targetdir:$(Agent.TempDirectory)/coverlet/reports \
        -reporttypes:Cobertura
    displayName: Generate Code Coverage Report
    condition: always()

  - task: PublishCodeCoverageResults@1
    displayName: Publish Code Coverage Results
    condition: always()
    inputs:
      codeCoverageTool: cobertura
      summaryFileLocation: $(Agent.TempDirectory)/**/Cobertura.xml
      failIfCoverageEmpty: false
  
  - task: DotNetCoreCLI@2
    displayName: .NET Pack
    inputs:
      command: pack
      projects: '**/*.csproj'
      configuration: $(BuildConfiguration)
      nobuild: true
      arguments: '--no-restore -o $(Build.ArtifactStagingDirectory)'
      versioningScheme: off
      verbosityPack: Normal
  
  - task: PublishBuildArtifacts@1
    displayName: Publish Artifacts
    inputs:
      ArtifactName: Packages
      PathtoPublish: $(Build.ArtifactStagingDirectory)
