trigger:
  batch: true
  branches:
    include:
    - master
    - release/*
  paths:
    include:
    - src/*
    - tool/*
    - azure-pipelines.yml

pr:
  branches:
    include:
    - master
    - release/*
  paths:
    exclude:
    - docs/*
    - README.md
    - .dependabot/*
    - .editorconfig

pool: Linux

variables:
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  BuildConfiguration: Release
  NuGetFeed: 'UnMango GitHub NuGet'
  CI: true

stages:
- stage:
  displayName: Build
  jobs:
  - job: build_test_pack
    displayName: 'Build, Test, and Pack'
    workspace:
      clean: outputs
    steps:
    - checkout: self
    
    - task: UseDotNet@2
      displayName: Install .NET Core
      inputs:
        packageType: sdk
        useGlobalJson: true

    - bash: dotnet tool restore
      displayName: Restore .NET Tools
      
    - task: DotNetCoreCLI@2
      displayName: .NET Restore
      inputs:
        command: restore
        projects: '**/*.csproj'
        nugetConfigPath: NuGet.Config
        externalFeedCredentials: $(NuGetFeed)   # Service Connection Name
        arguments: '-c $(BuildConfiguration)'
        verbosityRestore: Normal
      
    - task: DotNetCoreCLI@2
      displayName: .NET Build
      inputs:
        command: build
        projects: '**/*.csproj'
        arguments: '--no-restore -c $(BuildConfiguration)'
      
    - task: DotNetCoreCLI@2
      displayName: .NET Test
      inputs:
        command: test
        projects: '**/*[Tt]est*.csproj'
        arguments: >
          --no-build
          --no-restore
          --configuration $(BuildConfiguration)
          --filter:"Category=Unit"
          --collect:"XPlat Code Coverage"
        publishTestResults: true

    - bash: |
        dotnet tool run reportgenerator \
          -reports:$(Agent.TempDirectory)/**/coverage.cobertura.xml \
          -targetdir:$(Agent.TempDirectory)/coverlet/reports \
          -reporttypes:Cobertura
      displayName: Generate Code Coverage Report
      condition: always()

    - task: PublishCodeCoverageResults@1
      displayName: Publish Code Coverage Results
      condition: always()
      inputs:
        codeCoverageTool: cobertura
        summaryFileLocation: $(Agent.TempDirectory)/**/Cobertura.xml
        failIfCoverageEmpty: false

    - task: DotNetCoreCLI@2
      displayName: .NET Pack
      inputs:
        command: pack
        projects: '**/*.csproj'
        configuration: $(BuildConfiguration)
        nobuild: true
        arguments: '--no-restore -o $(Build.ArtifactStagingDirectory)'
        versioningScheme: off
        verbosityPack: Normal
      
    - task: PublishBuildArtifacts@1
      displayName: Publish Artifacts
      inputs:
        ArtifactName: Packages
        PathtoPublish: $(Build.ArtifactStagingDirectory)

- stage:
  displayName: Deploy
  condition: |
    or(
      contains(variables['Build.SourceBranch'], 'master'),
      contains(variables['Build.SourceBranch'], 'release')
    )
  jobs:
  - deployment: deploy
    displayName: Deploy UnMango.Xml to GitHub
    pool: Linux
    workspace:
      clean: all
    dependsOn: build_test_pack
    variables:
      DotNetSdkVersion: 3.x

    environment: GitHub
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: Packages

          - task: UseDotNet@2
            displayName: Install .NET Core
            inputs:
              packageType: sdk
              version: $(DotNetSdkVersion)

          - task: DotNetCoreCLI@2
            displayName: Push Packages
            inputs:
              command: push
              packagesToPush: '$(Pipeline.Workspace)/**/*.nupkg;!$(Pipeline.Workspace)/**/*.symbols.nupkg'
              nuGetFeedType: external
              externalEndpoint: $(NuGetFeed)   # Service Connection Name
              publishPackageMetadata: true
